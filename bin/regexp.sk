type symb
type lett
type word

val lett_of_symb : symb → lett
val equal : (symb, lett) → ()

val isempty : word → ()
val head : word → lett
val tail : word → word

type expr =
  | Empty
  | Symb symb
  | Plus (expr, expr)

type m<a> = a

val return<a> (v: a) : m<a> = v
val ret (v: ()): m<()> = return<()> v

val bind<a, b> ((v: m<a>), (f: a → m<b>)) : m<b> =
  f v

type result = m<()>

binder @ = bind

val eval ((e: expr), (w: word)) : result =
  branch
    let Symb s =@ e in
    let l =@ head w in
    let t =@ tail w in
    let _ =@ isempty t in
    let _ =@ equal (s, l) in
    ret ()
  or
    let Plus (e1, _) =@ e in
    let _ =@ eval (e1, w) in
    ret ()
  or
    let Plus (_, e2) =@ e in
    let _ =@ eval (e2, w) in
    ret ()
  end